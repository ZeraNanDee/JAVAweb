SpringBoot=Spring+SpringMVC: SpringMVC提供了servlet的IOC容器，就是依赖注入，通过管理各个bean来自动装配实例化。底层是相当于Map的键值对，
Key-value，Key就是requestMapping注解的URL，而value就是注解下通过JAVA反射机制生成的类实例化bean（动态实例）。

application.yaml比起application.properties的优势在于，可以直接绑定pojo层的属性和值，方便设置全局环境。
在Company类中注入 @ConfigurationProperties(prefix = "company") ，根据对应的属性值，在application.yaml中绑定赋值即可。

JRS303验证是后台验证，前端验证可能被绕过执行，因为前后端都需要签证。@Validated加在实体类上

根据不同的开发环境，配置文件也可能不同，例如application.properties和application-test.properties。在默认的application.properties当中，
加上Spring.profiles.active=test，这样就更改成了application-test.properties文件。yaml的话就将不同环境通过---进行分割，不需要多个配置文件。
pring: 
  profiles: 
    active: test

@SpringBootApplication集成了自动装配，扫描bean以及项目包，tomcat等，更加便利。 
所有类最终都配置在SpringFactoriesLoader类中的  public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories 中
@Configuration(proxyBeanMethods = false)
@EnableConfigurationProperties(HttpProperties.class)
@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
@ConditionalOnClass(CharacterEncodingFilter.class)
@ConditionalOnProperty(prefix = "spring.http.encoding", value = "enabled", matchIfMissing = true)
HttpEncodingAutoConfiguration 一个这样的类都需要以上相关注解完成，才能在 application.properties 中可以调用。

自动装配的两个核心。
xxxxAutoConfiguration:自动装配类：给容器中添加组件
xxxxProperties:封装配置文件中相关属性；
application.properties中配置 debug = true 可以查看已经自动装配好的工具和还没装配的。

静态资源装配：WebMvcAutoConfiguration和WebMvcProperties 指定了路径 WEB/INF/webjars/** 或者 /** , 静态资源如果在项目中的话，相同文件名
优先级：resource目录 > static目录 > 其他路径  一般静态资源访问的目录：static resource public /** webjars

@Configuration是可以自定义MVC的类，可以实现WebMvcConfigurer类的一些常用的接口，同时还可以添加自定义的新类。

如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面e79fa5e98193e4b893e5b19e31333363393730，配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。

pojo类中的注解：@Data @AllArgsConstructor @NoArgsConstructor 无需写setter getter 和构造函数。

转发和重定向的区别：1.转发就是客户端对服务器进行一次请求（客户端向服务器发送请求，服务器有这个路径直接转发到这个路径给客户端）,
前后页共用一个request，可以通过此来传递一些数据或者session信息，request.setAttribute()和request.getAttribute()。
                  2.重定向就是客户端对服务器进行两次请求（客户端向服务器发送请求后，服务器只返回给这个请求的数据给客户端，客户端需要重新用此数据发送请求）,
前后页不共用一个request，不能读取转向前通过request.setAttribute()设置的属性值,可以使用session。

对数据进行修改、删除、添加操作的时候，应该用response.sendRedirect()。
如果是采用了request.getRequestDispatcher().forward(request,response)，
那么操作前后的地址栏都不会发生改变，仍然是修改的控制器，如果此时再对当前页面刷新的话，
就会重新发送一次请求对数据进行修改，这也就是有的人在刷新一次页面就增加一条数据的原因。

因为 spring boot 内置了servlet容器，所以没有web.xml，直接用XXXRegistrationBean实例化bean

java8中的lambda表达式，方法需要相应的接口，
例如 MathOperation addition = (int a, int b) -> a + b; 
需要 interface MathOperation {
      int operation(int a, int b);
   }
   
springSecurity @EnableWebSecurity 继承WebSecurityConfigurerAdapter 通过授权和认证来设置拦截
链式编程：从写configure(HttpSecurity http)方法用来授权  从写configure(AuthenticationManagerBuilder auth)用来认证

// 没有权限的话，默认到登录页面(SpringSecurity自带的login)
// 可以自定义跳转的页面loginPage("/toLogin")请求的Controller的URL,loginProcessingUrl中的参数是表单提交的URL
// 前台收到的参数默认是username和password，参数名如果不同需要自定义，否则报错
http.formLogin().loginPage("/toLogin").loginProcessingUrl("/login");

@Bean 创建一个实例，并将返回这个实例。
@Autowired 拿出一个该类的实例，如果没有实例化，就拿不到，@Service，@Component...这些一半都自带@Bean实例化。
