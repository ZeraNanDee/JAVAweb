SpringIOC实例化都是通过JAVA的反射机制实现

JAVA的反射机制就是允许我们动态调用某个对象的方法/构造函数，获取某个对象的属性等，
而无需再编码时确定调用的对象，也就是不需要自己在编码时new出来，而是类编译加载时JVM自动创建实例。
Class c=Class.forName（“类的路径”）
Object action=c.newInstance（）;//加载类，调用无参默认的构造函数
c.getMethod（）/C.getField（）....可以获取对象c的方法/构造函数，获取某个对象的属性等（包括私有）

Spring IOC是面向接口编程，低耦合度的MVC设计模式，从底层构造程序，通过DI注入（XML的bean实例，注解，setter注入）
Spring AOP用于事务管理。
@Aspect(切面): 通常是一个类，里面可以定义切入点和通知JointPoint(连接点):  程序执行过程中明确的点，一般是方法的调用Advice(通知):  AOP在特定的切入点上执行的增强处理:@Before:  标识一个前置增强方法，相当于BeforeAdvice的功能@After: final增强，不管是抛出异常或者正常退出都会执行
@AfterReturning:  后置增强，似于AfterReturningAdvice, 方法正常退出时执行@AfterThrowing:  异常抛出增强，相当于ThrowsAdvice@Around: 环绕增强

private static ApplicationContext applicationContext;这个类是Spring IOC容器的使用
    ApplicationContext（上下文管理）是由BeanFactory（工厂类管理）派生而来，是其子类，多了一些方法，例如：
	1.ApplicationContext有多了监控和事件机制，ContextRefreshedEvent：bean全部类加载完，
	有相关相应事件，同时更容易看出bean文件配置错误，bean生命周期的启动停止销毁
	2.利用MessageSource进行国际化  
	3.底层资源的访问 ，扩展了ResourceLoader(资源加载器)接口，从而可以用来加载多个Resource
	4.对Web应用的支持  
  
  new 是java中的关键字，是创建一个新对象的关键字，面向对象编程，是静态实例
  而newInstance（）是通过反射机制实例一个对象，用于面向接口编程,javaweb的spring中常用的静态实例化方法，newInstance() 是java反射框架中类对象(Class)创建新对象的方法,
  方法签名：Object java.lang.Class.newInstance();如:  
  Class clazz = String.class;     Object newInstance = clazz.newInstance();
  编译时反射将寻找的对象直接实例化，如果不存在此对象，编译也可以通过，而new关键字就不行，必须先指明要实例化的对象。
  newInstance()也经常见于工厂设计模式中，在该模式中，共产类的该方法返回一个工厂bean。
  
  bean的id和name的区别就是id必须唯一不能有相同id，否则报错，而name可以同名，但配置文件中允许出现两个name相同的<bean>，
  在用getBean()返回实例时，后面一个Bean被返回,应该是前面那个<bean>被后面同名的 <bean>覆盖了。
  
  <bean id="itemf" class="cn.itcareers.m03.ItemFactory" /> 是个普通的Bean；
<bean id="item" factory-bean="itemf" factory-method="getItem" />是工厂Bean。
普通的Bean返回的是一个实例。工厂Bean返回的不是一个实例，而是由工厂getItem方法返回的对象，作为工厂方法返回的实例，它将使用容器创建的bean。
Bean工厂有静态的，Bean工厂的管理机制就是用bean管理bean，最开始实例化bean工厂，之后每次调用只需要更改bean工厂中的bean的值，而不需要再实例化。

JVM：1.加载.class文件 2.管理并分配内存 3.执行垃圾收集 JRE包含JVM的运行环境，是JAVA程序运行的容器，同时也是操作系统的
一个进程，JVM在整个JDK中处于最底层，负责于操作的交互，用来屏蔽操作系统环境，提供独特的运行环境，JVM通过JDK的java.exe完成，
JVM就是JAVA可以运用于多平台的一个重要原因。

JVM的类加载器->内存区域（方法区，虚拟机栈，堆，程序计数器，本地方法栈（调用本地库接口，和C语言有关，名为JNI）->垃圾处理器
堆一般存放实例，实例化的对象存在堆中，元空间（永久区）一般放JDK自身class，interface元数据，不会被垃圾处理器回收。
类文件和方法存在虚拟机栈中，栈执行方法都是先进后出，如果进入无线递归方法，则会不停入栈，导致虚拟机栈溢出，java.lang.StackOverflowError
栈管运行，堆管储存。
而方法去存放静态变量，常量，类信息，JAVA共用类等。（此区域属于共享区域）
JVM关闭时释放虚拟机内存。
-Xmx1024m -Xms1024m -xx：+PrintGCDetails 通过改变堆内存大小，优化JVM虚拟机，默认JVM内存堆内存为电脑内存的1/4。
垃圾处理：最合适的算法-分代收集算法（年轻代，老年代，Eden）

Spring配置文件的整合，如果导入多个XML文件，可以再另外做一个XML作为这些XML的整合，在主方法中只需要调用整合的XML即可


Spring使用外部属性文件:
--添加命名空间：<beans>中添加context Schema定义（xmlns:context="http://www.springframework.org/schema/context"）
--在配置文件下加入配置：<context:property-placeholder location="classpath:db.properties"/>
<!-- 导入属性文件 -->  
<context:property-placeholder location="classpath:db_properties"/>  
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
    <property name="user" value="${user}"></property>  
    <property name="password" value="${password}"></property>  
    <property name="driverClass" value="${driverclass}"></property>  
    <property name="jdbcUrl" value="${jdbcurl}"></property>  
</bean>   

Spring表达式语言（简单SpEL）：是一个支持运行时查询和操作对象图的强大的表达式语言，
语法类似于EL：SpEL使用#｛...｝作为定界符，所有在大框号中的字符都将被认为是SpEL。
SpEL为bean的属性进行动态赋值提供了便利。

SpEL表达式：字面量
字面量的表示：
---  整数：<property name="count" value="#{5}"/>
---  小数：<property name="frequency" value="#{89.7}"/>
---  科学计数法：<property name="capacity" value="#{1e4}"/>
---  String可以使用单引号或者双引号作为字符串的定界符号：
           <property name="name" value="#{"Chuck"}"/>或<property name="name" value="#{'Chuck'}"/>
---  Boolean：<property name="enabled" value="#{false}"/>

[html] view plain copy print?
<!-- 使用spel为属性赋一个字面值 -->  
<bean id="address" class="com.wul.spring.beans.spel.Address">  
    <property name="city" value="#{'Beijing'}"></property>  
    <property name="street" value="WuDaoKou"></property>  
</bean>  

通过SpEL可以实现：
1.引用其他对象
[html] view plain copy print?
<!-- 使用spel来应用其他的bean -->  
<property name="car" value="#{car}"></property>  

2.引用其他对象的属性
[html] view plain copy print?
<!--使用spel来应用其他的bean的属性 -->  
<property name="city" value="#{address.city}"></property>  

3.调用其他方法，还可以链式操作

4.算数运算符：+ -  *  /  % ^

5.加号还可以用作字符串连接

6.比较运算符：< > == <=  >= lt gt eq le ge 

7.逻辑运算符：and，or，not，|

8.if-else运算符：？: (temary) , ?:(Elvis)
[html] view plain copy print?
<!-- 在spel中使用运算符 -->  
lt;property name="info" value="#{car.price>=300000?'金领':'白领'}"></property>  
9.if-else的变体

10.正则表达式：matches

11.调用静态方法或静态属性：通过T()调用一个类的静态方法，它将返回一个Class Object，然后再调用相应的方法或属性。
[html] view plain copy print?
<!--使用spel引用类的静态属性  -->  
<property name="tyrePerimeter" value="#{T(java.lang.Math).PI*80}"></property>  

使用构造器注入属性值可以指定参数的位置和类型。例如两个构造器参数不同，参数重载了，那么在配置文件中调用时可以用type=“（类型）”区分

bean的内部bean不能被外部引用

  p命名相比较property更简便，p：属性=“值” 
  p：属性-ref=“引用不同类的别的bean的值”，一般用于某类要实例化某类时，并且需要bean需要ref另外的这个bean时，用p标签是这样 p：属性-ref=“。。”
  List 对象 ---- <list> 元素
  Set 对象 ---- <set> 元素
  Map对象 ----<map>元素
  Properties 对象 ---- <props> 元素
 
 bean的生命周期：通过构造器或工厂方法创建bean实例，为bean属性设置值和对其他bean的引用，将bean实例传递给bean后置处理器的
 postProcessBeforeInitialization方法，调用bean的初始化方法，将bean实例传递给bean后置处理器的postProcessAfterInitialization方法，
 bean执行，关闭容器时，调用destroy方法销毁bean实例

@override注解是用来检测重写，一般用于子类方法上面，检测有没有相同父类方法。框架有更多自定义的注解，方便配置代码,XML和注解各有利弊
@Component是Spring的注解，相当于XML中的实例bean id=“..” class=“..” 同样是利用JAVA反射机制new出实例

HashMap使用Hash算法，所以在解剖HashMap之间，需要先简单的了解Hash算法，Hash算法一般也成为散列算法，通过散列算法将任意的值转化成固定的长度输出，
该输出就是散列值，这是一种压缩映射，也就是，散列值的空间远远小于输入的值空间。
简单的说，hash算法的意义在于提供了一种快速存取数据的方法,它用一种算法建立键值与真实值之间的对应关系,
(每一个真实值只能有一个键值,一个键值只能映射一个value值,相同键值的话，重写value会重新覆盖),这样可以快速在数组等里面存取数据。

注解方式有多种Spring自带一些，@Repository是DAO数据库访问装配的注解, xml中引入context属性，指定IOC扫描的范围，在JAVA类中利用@Aotuwired自动装配就可以实例各个Bean,装配在setter方法
或者属性之上都可以。一个bean调用多个bean，多个bean再调用多个bean，在其里只需要@Aotuwired就自动装配,注解在bean中的ID默认是类的首字母小写版本。
也可以例如@Service（“User”）自己设置bean的id,告诉Spring实例化出一个叫User的User对象。


Spring AOP 切面：跨越应用程序的多个模块的功能，将纯净代码和日志和验证等..模块分离出来维护。
           通知：切面必须要完成的工作，就是日志和验证等得更改的工作。
	   目标：被通知的对象
	   代理：向目标对象应用通知之后创建的对象，也就是将这些切面出来的模块最后柔和的结果。
	   连接点：程序执行的某个特定位置，例如方法调用前，方法调用后。执行点表示某个方法，方位则是在这个方法的前后
	   切点：每个类有多个连接点，AOP通过切点定位到特定的连接点，一个切点匹配多个连接点。
	   相同的前置或者后置通知下，可以用优先级注解是用@order（1），里面数字越小优先级越高。
	   @Aspect是AOP切面特定的注解，用来实现AOP切面
	   
	   
	   isAssignableFrom 是用来判断一个类Class1和另一个类Class2是否相同或是另一个类的超类或接口
	   而  instanceof  是用来判断一个对象实例是否是一个类或接口的或其子类子接口的实例。   
所有的类都是Class类的实例，Object是类，那么Object也是Class类的一个实例。
所有的类都最终继承自Object类，Class是类，那么Class也继承自Object。
         System.out.println(Class.class instanceof Object);
         System.out.println(Object.class instanceof Class);
两者结果都是true。
打个比方，番茄炒蛋。并不是要先把番茄完全炒好，然后把鸡蛋完全炒好，然后把它们混起来；
而是先炒番茄炒到半熟，再炒鸡蛋炒到半熟，然后把两个半熟的部分混在一起同时炒熟。
JVM初始化时第一个装载的应该是rt.jar里的Object.class，但它初始化完成时包括Class.class、ClassLoader.class等其他相关类也已经被装载了。
两者存在相对依赖关系，而不是绝对的先后顺序，JVM的bootstrap过程，先分配空间，再把相互引用关系串起来。

jdbctemplate的方法update（）用来更新sql语句（增删改），queryforObject（）方法用来查sql,jdbctemplate不支持级联操作。

Spring事务的注解时，关键字是@Transactional,默认值@Transactional（Propagation=Propagation.REQUIRED）
就是提交时如果其中一项不符合要求，全部撤回（事务回滚），提交过程中全部符合要求才会提交成功。
@Transactional（Propagation=Propagation.REQUIRED_NEW）这个表示提交事务时，只要达到符合要求的项都能提交成功，直到不符合要求的就不提交了。
@Transactional（readOnly=true）用于只读取数据库而不更新数据库时，可以帮助数据库引擎优化事务,默认是false。
@Transactional（timeout=6）表示事务提交的可等待时间6秒以内提交成功，若某个链接超过6秒，这个事务就会回滚，提交失败。

在并发编程中很容易出现并发安全的问题，
有一个很简单的例子就是多线程更新变量i=1,比如多个线程执行i++操作，
就有可能获取不到正确的值。在JAVA JUC下的atomic包工具类
可以解决这类数据原子性问题：1. 既有内存可见性volatile ，2. CAS 算法（内存值，预估值，更新值）
private static AtomicInteger atomicInteger = new AtomicInteger();

当许多线程访问collection时，ConcurrentHashMap通常优于同步的HashMap，
ConcurrentSkipListMap通常优于同步的TreeMap，当期望的读数和遍历远远大于列表
的更新数据时，CopyOnWriteArrayList优于同步的ArrayList。

